// to check the access rights of a file
int access(char* path_name, int right)
/*
    returns 0 if the verified right is set and -1 if it's not
    R_OK (=1) - calling process has reading rights over the file "path_name"
    W_OK (=2) - calling process has writing rights over the file "path_name"
    X_OK (=4) - calling process has execution rights over the file "path_name"
    F_OK (=0) - "path_name" exists
*/

// to create a file
int creat(char* path_name, int access_rights)
/*
    returns the file descriptor of the created (also opened) file or -1 if an error occurs
    if the file already exists, it'll be overwritten
    a call to creat (path_name, access_rights) is equivalent to open(path_name, O_WRONLY | O_CREAT | O_TRUNC, access_rights)
*/

// to open a file
int open(char* path_name, int open_type, int access_rights)
/*
    returns the file descriptor of the opened file or -1 if an error occurs
    open type can be a combination of:
        only one of the following three: O_RDONLY, O_WRONLY, O_RDWR
        a combination of the following:
            O_APPEND - appends to what is already written in the file
            O_CREAT - creates the file it does not exist
            O_TRUNC - if the file exists, it'll delete its contents
            O_EXCL - fails if the file already exists
            O_CLOEXEC - closes the file automatically if another process is started using exec (close-on-execution)
            O_NONBLOCK - will not block the calling thread
*/

// to read from a file
int read(int file_descriptor, char* buffer, unsigned number_of_bytes)
/*
    returns the number of bytes that have been read or -1 if an error occurs
    after reading the file cursor will be set to the byte after the last one that has been read
*/

// to write into a file
int write(int file_descriptor, char* buffer, unsigned number_of_bytes)
/*
    returns the number of bytes that have been read or -1 if an error occurs
    after writing the file cursor will be set to the byte after the last one that has been written into
*/

// to change the file cursor
long lseek(int file_descriptor, long adjust_value, int adjust_mode)
/*
    returns the file cursor's place (relative to the beginning)
    adjust_mode can be either one of the following:
        SEEK_SET (=0) : adjust relative to the file's beginning
        SEEK_CUR (=1) : adjust relative to the current file cursor placement
        SEEK_END (=2) : adjust relative to the file's end
*/

// to close a file
int close(int file_descriptor)
/*
    returns 0 if successful, -1 if the closing has failed
*/

// to make a directory
int mkfifo(char* path_name, int access_rights)
/*
    return 0 if successful, -1 if an error occurs
*/

// to make a directory
int mkdir(char* path_name, int access_rights)
/*
    return 0 if successful, -1 if an error occurs
*/

// to find out what the current directory is
char* getcwd()
/*
    always returns the current working directory
*/

// to change the current working directory
int chdir(char* path_name)
/*
    return 0 if successful, -1 if an error occurs
*/


/*
    file creation primitives:
        mknod
        mkfifo
        mkdir
        link
        symlink
        creat
        socket
    file deletion primitives:
        rmdir (for directories)
        unlink (for files)
    file renaming primitive:
        rename
    file information gathering primitives:
        stat / fstat / lstat: consults the file in various ways
        access: consults only the file's permissions
    file information manipulation primitives:
        chmod / fchmod
        chown / fchown / lchown
        chgrp
    link creation primitive:
        link
    link deletion primitive:
        unlink
    system extension primitives:
        mount
        umount
    file content access/manipulation primitives:
        open / creat
        read
        write
        lseek
        close
    file descriptor duplication primitives:
        dup
        dup2
    session state consulting primitives:
        select
        poll
    file content truncation primitive:
        truncate / ftruncate
    process manipulation primitives:
        chdir: changes the current working directory
        umask: changes the basic permissions "mask" for file creation
        chroot: changes the root ot the process (and the files that're avaliable to it)
    file exclusive access restriction primitives:
        flock
        fcntl
        ioctl
    file mapping (in the memory of the process) primitive:
        mmap
    pipe creation primitive:
        pipe
    fifo file creation primitive:
        mkfifo
    
*/




/* Basic cp file copy program. POSIX implementation. */

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <linux/limits.h>
#define BUF_SIZE 4096 // This is exactly the page size, for disk I/O efficiency !
int main(int argc, char** argv) {
    int input_fd, output_fd;
    ssize_t bytes_in, bytes_out;
    char buffer[BUF_SIZE];
    char input_file_name[PATH_MAX];
    strcpy(input_file_name, ""); // if you were to make this global you could get rid of this line
    char output_file_name[PATH_MAX];
    strcpy(output_file_name, ""); // same story here

    if (argc >= 2) {
        strcpy(input_file_name, argv[1]);
    }

    while (strcmp(input_file_name, "") == 0 || access(input_file_name, R_OK) == -1 ) {
        printf("Insert a file name here: ");
        scanf("%s", input_file_name);
    }

    if (argc >= 3) {
        strcpy(output_file_name, argv[2]);
    }

    while (strcmp(output_file_name, "") == 0 || access(output_file_name, W_OK) == -1 ) {
        printf("Insert a file name here: ");
        scanf("%s", output_file_name);
    }

    input_fd = open(input_file_name, O_RDONLY, 0400);
    if (input_fd == -1) {
        perror(input_file_name);
        return 2;
    }

    output_fd = open(output_file_name, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (output_fd == -1) {
        perror(output_file_name);
        return 3;
    }

    /* Process the input file a record at a time. */
    bytes_in = read(input_fd, buffer, BUF_SIZE);
    while (bytes_in > 0) {
        bytes_out = write(output_fd, buffer, bytes_in);
        if (bytes_out != bytes_in) {
            perror("Fatal write error.\n");
            return 4;
        }
        if (bytes_out == -1) {
            perror("Error encountered when writing into a file.\n");
            return 5;
        }
        bytes_in = read(input_fd, buffer, BUF_SIZE);
    }
    if (bytes_in == -1) {
        perror ("Error encountered when reading from a file.\n");
        return 6;
    }

    if (close(input_fd) == -1) {
        perror("Error encountered when closing a file.\n");
        return 7;
    }

    if (close(output_fd) == -1) {
        perror("Error encountered when closing a file.\n");
        return 8;
    }

    return 0;
}



/* to work with directories in c */

DIR * dd ; // director descriptor
struct dirent * de ; // director
/* opening the director */
if ((dd = opendir(nume_director)) == NULL)
{
    // TODO : handling the director opening error
}
/* prelucrarea secventiala a tuturor intrarilor din director */
while ((de = readdir(dd)) != NULL)
{
    // TODO : processing the current director entry
}
/* closing the director */
closedir(dd);






/* to work with files in c */

#include <stdio.h>
#define BUF_SIZE 4096 // This is exactly the page size , for disk I / O efficiency !

int main(int argc, char* argv[]) {
    FILE *input_file, *output_file;
    ssize_t bytes_in, bytes_out;
    char buffer[BUF_SIZE];
    if (argc != 3) {
        printf("Usage : cp file - src file - dest \ n ");
        return 1;
    }
    input_file = fopen(argv[1],"rb");
    if (input_file == NULL) {
        perror(argv[1]);
        return 2;
    }
    output_file = fopen(argv[2],"wb");
    if (output_file == NULL) {
        perror(argv[2]);
        return 3;
    }

    /* Process the input file a record at a time . */

    while ((bytes_in = fread(buffer,1 ,BUF_SIZE, input_file)) > 0) {
        bytes_out = fwrite(buffer,1 ,bytes_in, output_file);
        if (bytes_out != bytes_in) {
            perror("Fatal write error.");
            return 4;
        }
    }
    fclose(input_file);
    fclose(output_file);
    return 0;
}
